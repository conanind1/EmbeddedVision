/*
 * Copyright (c) 2007 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#include <stdio.h>

#include "xparameters.h"
#include "lwip/inet.h"
#include "lwip/ip_addr.h"
#include "netif/xadapter.h"

#include "platform.h"
#include "platform_config.h"

#include "webserver.h"
#include "xil_types.h"
#include "xil_io.h"

void print_headers();


struct netif server_netif;

void
print_ip(char *msg, ip4_addr_t *ip)
{
    print(msg);
    xil_printf("%d.%d.%d.%d\r\n", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void
print_ip_settings(struct ip_addr *ip, struct ip_addr *mask, struct ip_addr *gw)
{
    print_ip("Board IP:       ", ip);
    print_ip("Netmask :       ", mask);
    print_ip("Gateway :       ", gw);
}


int main()
{
	ip4_addr_t ip4addr, netmask, gw;

	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] = { 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

	init_platform();

	/* initialize file system layer */
	init_fs();

	/* initliaze IP addresses to be used */

	IP4_ADDR(&ip4addr,  192, 168,   1, 10);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      192, 168,   1,  1);

    xil_printf("\r\n\r\n");
    xil_printf("-----lwIP WebServer Demo Application ------\r\n");
    print_ip_settings(&ip4addr, &netmask, &gw);

	lwip_init();

  	// Add network interface to net_if list, specify as default
	if (!xemac_add(&server_netif, &ip4addr, &netmask, &gw, mac_ethernet_address, PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\r\n");
		return -1;
	}
	netif_set_default(&server_netif);

	// enable interrupts
	platform_enable_interrupts();

	// Specify that network is up
	netif_set_up(&server_netif);

	/* start the application (web server, echo server, ...) */
	start_web_server();

    u32 regVal = 0;
    regVal = 16 | (96 << 5) | (48 << 12) | (640 << 18);
    Xil_Out32( (XPAR_VGA_TIMING_CONTROLLER_0_BASEADDR + 0x04), regVal); // HSync Control Register


    regVal = 0;
    regVal = 10 | (2 << 5) | (10 << 12) | (480 << 18);
    Xil_Out32( (XPAR_VGA_TIMING_CONTROLLER_0_BASEADDR + 0x08), regVal); // VSync Control Register


    u32* image_base_ptr = (u32*)0x10000000;
    u32 i = 0;
    u32 red, green, blue;
    for(i=0;i<4020;i++)
    {
    	red = ((*image_base_ptr) >> 16 ) & 0x000000FF;
    	green = ((*image_base_ptr) >> 8 ) & 0x000000FF;
    	blue = ((*image_base_ptr) >> 0 ) & 0x000000FF;
    	image_base_ptr++;
    	//xil_printf("%d\n\r", red);
    }

    // Put data from DDR to BRAM
    image_base_ptr = (u32*)0x10000000;
    u8* bram_addr_ptr = (u8*) 0;

    bram_write(image_base_ptr, bram_addr_ptr, 4020); // all channels
    Xil_Out32(XPAR_VGA_TIMING_CONTROLLER_0_BASEADDR, 9); // Start in Ruyajishenkooo mode

    /*
    // perform software edge detection on DDR and put it to BRAM
    // DDR base 0x10000000 - 0x1000C000 holds the image
    // 0x11000000 - 0x1000C000 -> gray image (already in the memory at this point)
    // 0x11100000 - 0x1110C000 -> y-gradient
    // 0x11200000 - 0x1120C000 -> x-gradient

    rgb2gray((u32*)0x10000000, (u32*)0x11000000, COL_COUNT, ROW_COUNT, (u8*)0);


	y_gradient((u32*)0x11000000, (u32*)0x11100000, COL_COUNT, ROW_COUNT, (u8*)0);
	x_gradient((u32*)0x11000000, (u32*)0x11200000, COL_COUNT, ROW_COUNT, (u8*)0);
	edge_detection((u32*)0x11100000, (u32*)0x11200000, (u32*)0x11300000, COL_COUNT, ROW_COUNT, (u8*)0);
    */

	/* receive and process packets */
	while (1) {
		xemacif_input(&server_netif);
	}

        /* never reached */
    cleanup_platform();

	return 0;
}
